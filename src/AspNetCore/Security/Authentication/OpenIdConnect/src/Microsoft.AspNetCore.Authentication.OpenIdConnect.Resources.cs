// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.Authentication.OpenIdConnect
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>OpenIdConnectAuthenticationHandler: message.State is null or empty.</summary>
        internal static string MessageStateIsNullOrEmpty => GetResourceString("MessageStateIsNullOrEmpty");
        /// <summary>Unable to unprotect the message.State.</summary>
        internal static string MessageStateIsInvalid => GetResourceString("MessageStateIsInvalid");
        /// <summary>Message contains error: '{0}', error_description: '{1}', error_uri: '{2}'.</summary>
        internal static string MessageContainsError => GetResourceString("MessageContainsError");
        /// <summary>Message contains error: '{0}', error_description: '{1}', error_uri: '{2}'.</summary>
        internal static string FormatMessageContainsError(object p0, object p1, object p2)
           => string.Format(Culture, GetResourceString("MessageContainsError"), p0, p1, p2);

        /// <summary>The Validated Security Token must be of type JwtSecurityToken, but instead its type is: '{0}'.</summary>
        internal static string ValidatedSecurityTokenNotJwt => GetResourceString("ValidatedSecurityTokenNotJwt");
        /// <summary>The Validated Security Token must be of type JwtSecurityToken, but instead its type is: '{0}'.</summary>
        internal static string FormatValidatedSecurityTokenNotJwt(object p0)
           => string.Format(Culture, GetResourceString("ValidatedSecurityTokenNotJwt"), p0);

        /// <summary>Unable to validate the 'id_token', no suitable ISecurityTokenValidator was found for: '{0}'."</summary>
        internal static string UnableToValidateToken => GetResourceString("UnableToValidateToken");
        /// <summary>Unable to validate the 'id_token', no suitable ISecurityTokenValidator was found for: '{0}'."</summary>
        internal static string FormatUnableToValidateToken(object p0)
           => string.Format(Culture, GetResourceString("UnableToValidateToken"), p0);

        /// <summary>Cannot process the message. Both id_token and code are missing.</summary>
        internal static string IdTokenCodeMissing => GetResourceString("IdTokenCodeMissing");

    }
}
