// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.DataProtection
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>An error occurred during a cryptographic operation.</summary>
        internal static string CryptCommon_GenericError => GetResourceString("CryptCommon_GenericError");
        /// <summary>The provided buffer is of length {0} byte(s). It must instead be exactly {1} byte(s) in length.</summary>
        internal static string Common_BufferIncorrectlySized => GetResourceString("Common_BufferIncorrectlySized");
        /// <summary>The provided buffer is of length {0} byte(s). It must instead be exactly {1} byte(s) in length.</summary>
        internal static string FormatCommon_BufferIncorrectlySized(object p0, object p1)
           => string.Format(Culture, GetResourceString("Common_BufferIncorrectlySized"), p0, p1);

        /// <summary>The payload was invalid.</summary>
        internal static string CryptCommon_PayloadInvalid => GetResourceString("CryptCommon_PayloadInvalid");
        /// <summary>Property {0} cannot be null or empty.</summary>
        internal static string Common_PropertyCannotBeNullOrEmpty => GetResourceString("Common_PropertyCannotBeNullOrEmpty");
        /// <summary>Property {0} cannot be null or empty.</summary>
        internal static string FormatCommon_PropertyCannotBeNullOrEmpty(object p0)
           => string.Format(Culture, GetResourceString("Common_PropertyCannotBeNullOrEmpty"), p0);

        /// <summary>The provided payload could not be decrypted. Refer to the inner exception for more information.</summary>
        internal static string Common_DecryptionFailed => GetResourceString("Common_DecryptionFailed");
        /// <summary>An error occurred while trying to encrypt the provided data. Refer to the inner exception for more information.</summary>
        internal static string Common_EncryptionFailed => GetResourceString("Common_EncryptionFailed");
        /// <summary>The key {0:B} was not found in the key ring.</summary>
        internal static string Common_KeyNotFound => GetResourceString("Common_KeyNotFound");
        /// <summary>The key {0:B} has been revoked.</summary>
        internal static string Common_KeyRevoked => GetResourceString("Common_KeyRevoked");
        /// <summary>The provided payload cannot be decrypted because it was not protected with this protection provider.</summary>
        internal static string ProtectionProvider_BadMagicHeader => GetResourceString("ProtectionProvider_BadMagicHeader");
        /// <summary>The provided payload cannot be decrypted because it was protected with a newer version of the protection provider.</summary>
        internal static string ProtectionProvider_BadVersion => GetResourceString("ProtectionProvider_BadVersion");
        /// <summary>Value must be non-negative.</summary>
        internal static string Common_ValueMustBeNonNegative => GetResourceString("Common_ValueMustBeNonNegative");
        /// <summary>The type '{1}' is not assignable to '{0}'.</summary>
        internal static string TypeExtensions_BadCast => GetResourceString("TypeExtensions_BadCast");
        /// <summary>The type '{1}' is not assignable to '{0}'.</summary>
        internal static string FormatTypeExtensions_BadCast(object p0, object p1)
           => string.Format(Culture, GetResourceString("TypeExtensions_BadCast"), p0, p1);

        /// <summary>The new key lifetime must be at least one week.</summary>
        internal static string KeyManagementOptions_MinNewKeyLifetimeViolated => GetResourceString("KeyManagementOptions_MinNewKeyLifetimeViolated");
        /// <summary>The key {0:B} already exists in the keyring.</summary>
        internal static string XmlKeyManager_DuplicateKey => GetResourceString("XmlKeyManager_DuplicateKey");
        /// <summary>Argument cannot be null or empty.</summary>
        internal static string Common_ArgumentCannotBeNullOrEmpty => GetResourceString("Common_ArgumentCannotBeNullOrEmpty");
        /// <summary>Property {0} must have a non-negative value.</summary>
        internal static string Common_PropertyMustBeNonNegative => GetResourceString("Common_PropertyMustBeNonNegative");
        /// <summary>Property {0} must have a non-negative value.</summary>
        internal static string FormatCommon_PropertyMustBeNonNegative(object p0)
           => string.Format(Culture, GetResourceString("Common_PropertyMustBeNonNegative"), p0);

        /// <summary>GCM algorithms require the Windows platform.</summary>
        internal static string Platform_WindowsRequiredForGcm => GetResourceString("Platform_WindowsRequiredForGcm");
        /// <summary>A certificate with the thumbprint '{0}' could not be found.</summary>
        internal static string CertificateXmlEncryptor_CertificateNotFound => GetResourceString("CertificateXmlEncryptor_CertificateNotFound");
        /// <summary>A certificate with the thumbprint '{0}' could not be found.</summary>
        internal static string FormatCertificateXmlEncryptor_CertificateNotFound(object p0)
           => string.Format(Culture, GetResourceString("CertificateXmlEncryptor_CertificateNotFound"), p0);

        /// <summary>Decrypting EncryptedXml-encapsulated payloads is not yet supported on Core CLR.</summary>
        internal static string EncryptedXmlDecryptor_DoesNotWorkOnCoreClr => GetResourceString("EncryptedXmlDecryptor_DoesNotWorkOnCoreClr");
        /// <summary>The symmetric algorithm block size of {0} bits is invalid. The block size must be between 64 and 2048 bits, inclusive, and it must be a multiple of 8 bits.</summary>
        internal static string AlgorithmAssert_BadBlockSize => GetResourceString("AlgorithmAssert_BadBlockSize");
        /// <summary>The symmetric algorithm block size of {0} bits is invalid. The block size must be between 64 and 2048 bits, inclusive, and it must be a multiple of 8 bits.</summary>
        internal static string FormatAlgorithmAssert_BadBlockSize(object p0)
           => string.Format(Culture, GetResourceString("AlgorithmAssert_BadBlockSize"), p0);

        /// <summary>The validation algorithm digest size of {0} bits is invalid. The digest size must be between 128 and 2048 bits, inclusive, and it must be a multiple of 8 bits.</summary>
        internal static string AlgorithmAssert_BadDigestSize => GetResourceString("AlgorithmAssert_BadDigestSize");
        /// <summary>The validation algorithm digest size of {0} bits is invalid. The digest size must be between 128 and 2048 bits, inclusive, and it must be a multiple of 8 bits.</summary>
        internal static string FormatAlgorithmAssert_BadDigestSize(object p0)
           => string.Format(Culture, GetResourceString("AlgorithmAssert_BadDigestSize"), p0);

        /// <summary>The symmetric algorithm key size of {0} bits is invalid. The key size must be between 128 and 2048 bits, inclusive, and it must be a multiple of 8 bits.</summary>
        internal static string AlgorithmAssert_BadKeySize => GetResourceString("AlgorithmAssert_BadKeySize");
        /// <summary>The symmetric algorithm key size of {0} bits is invalid. The key size must be between 128 and 2048 bits, inclusive, and it must be a multiple of 8 bits.</summary>
        internal static string FormatAlgorithmAssert_BadKeySize(object p0)
           => string.Format(Culture, GetResourceString("AlgorithmAssert_BadKeySize"), p0);

        /// <summary>The key ring does not contain a valid default protection key. The data protection system cannot create a new key because auto-generation of keys is disabled.</summary>
        internal static string KeyRingProvider_NoDefaultKey_AutoGenerateDisabled => GetResourceString("KeyRingProvider_NoDefaultKey_AutoGenerateDisabled");
        /// <summary>{0} must not be negative</summary>
        internal static string LifetimeMustNotBeNegative => GetResourceString("LifetimeMustNotBeNegative");
        /// <summary>{0} must not be negative</summary>
        internal static string FormatLifetimeMustNotBeNegative(object p0)
           => string.Format(Culture, GetResourceString("LifetimeMustNotBeNegative"), p0);

        /// <summary>The '{0}' instance could not be found. When an '{1}' instance is set, a corresponding '{0}' instance must also be set.</summary>
        internal static string XmlKeyManager_IXmlRepositoryNotFound => GetResourceString("XmlKeyManager_IXmlRepositoryNotFound");
        /// <summary>The '{0}' instance could not be found. When an '{1}' instance is set, a corresponding '{0}' instance must also be set.</summary>
        internal static string FormatXmlKeyManager_IXmlRepositoryNotFound(object p0, object p1)
           => string.Format(Culture, GetResourceString("XmlKeyManager_IXmlRepositoryNotFound"), p0, p1);

        /// <summary>Storing keys in a directory '{path}' that may not be persisted outside of the container. Protected data will be unavailable when container is destroyed.</summary>
        internal static string FileSystem_EphemeralKeysLocationInContainer => GetResourceString("FileSystem_EphemeralKeysLocationInContainer");
        /// <summary>Storing keys in a directory '{path}' that may not be persisted outside of the container. Protected data will be unavailable when container is destroyed.</summary>
        internal static string FormatFileSystem_EphemeralKeysLocationInContainer(object path)
           => string.Format(Culture, GetResourceString("FileSystem_EphemeralKeysLocationInContainer", new [] { "path" }), path);


    }
}
