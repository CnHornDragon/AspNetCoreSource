// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.Antiforgery
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>The provided identity of type '{0}' is marked {1} = {2} but does not have a value for {3}. By default, the antiforgery system requires that all authenticated identities have a unique {3}. If it is not possible to provide a unique {3} for this identity, con ...</summary>
        internal static string AntiforgeryTokenValidator_AuthenticatedUserWithoutUsername => GetResourceString("AntiforgeryTokenValidator_AuthenticatedUserWithoutUsername");
        /// <summary>The provided identity of type '{0}' is marked {1} = {2} but does not have a value for {3}. By default, the antiforgery system requires that all authenticated identities have a unique {3}. If it is not possible to provide a unique {3} for this identity, con ...</summary>
        internal static string FormatAntiforgeryTokenValidator_AuthenticatedUserWithoutUsername(object p0, object p1, object p2, object p3, object p4, object p5)
           => string.Format(Culture, GetResourceString("AntiforgeryTokenValidator_AuthenticatedUserWithoutUsername"), p0, p1, p2, p3, p4, p5);

        /// <summary>The provided antiforgery token failed a custom data check.</summary>
        internal static string AntiforgeryToken_AdditionalDataCheckFailed => GetResourceString("AntiforgeryToken_AdditionalDataCheckFailed");
        /// <summary>The provided antiforgery token was meant for a different claims-based user than the current user.</summary>
        internal static string AntiforgeryToken_ClaimUidMismatch => GetResourceString("AntiforgeryToken_ClaimUidMismatch");
        /// <summary>The antiforgery token could not be decrypted.</summary>
        internal static string AntiforgeryToken_DeserializationFailed => GetResourceString("AntiforgeryToken_DeserializationFailed");
        /// <summary>The antiforgery cookie token and request token do not match.</summary>
        internal static string AntiforgeryToken_SecurityTokenMismatch => GetResourceString("AntiforgeryToken_SecurityTokenMismatch");
        /// <summary>Validation of the provided antiforgery token failed. The cookie token and the request token were swapped.</summary>
        internal static string AntiforgeryToken_TokensSwapped => GetResourceString("AntiforgeryToken_TokensSwapped");
        /// <summary>The provided antiforgery token was meant for user "{0}", but the current user is "{1}".</summary>
        internal static string AntiforgeryToken_UsernameMismatch => GetResourceString("AntiforgeryToken_UsernameMismatch");
        /// <summary>The provided antiforgery token was meant for user "{0}", but the current user is "{1}".</summary>
        internal static string FormatAntiforgeryToken_UsernameMismatch(object p0, object p1)
           => string.Format(Culture, GetResourceString("AntiforgeryToken_UsernameMismatch"), p0, p1);

        /// <summary>The antiforgery cookie token is invalid.</summary>
        internal static string Antiforgery_CookieToken_IsInvalid => GetResourceString("Antiforgery_CookieToken_IsInvalid");
        /// <summary>The required antiforgery cookie "{0}" is not present.</summary>
        internal static string Antiforgery_CookieToken_MustBeProvided => GetResourceString("Antiforgery_CookieToken_MustBeProvided");
        /// <summary>The required antiforgery cookie "{0}" is not present.</summary>
        internal static string FormatAntiforgery_CookieToken_MustBeProvided(object p0)
           => string.Format(Culture, GetResourceString("Antiforgery_CookieToken_MustBeProvided"), p0);

        /// <summary>The required antiforgery cookie token must be provided.</summary>
        internal static string Antiforgery_CookieToken_MustBeProvided_Generic => GetResourceString("Antiforgery_CookieToken_MustBeProvided_Generic");
        /// <summary>The required antiforgery form field "{0}" is not present.</summary>
        internal static string Antiforgery_FormToken_MustBeProvided => GetResourceString("Antiforgery_FormToken_MustBeProvided");
        /// <summary>The required antiforgery form field "{0}" is not present.</summary>
        internal static string FormatAntiforgery_FormToken_MustBeProvided(object p0)
           => string.Format(Culture, GetResourceString("Antiforgery_FormToken_MustBeProvided"), p0);

        /// <summary>The required antiforgery header value "{0}" is not present.</summary>
        internal static string Antiforgery_HeaderToken_MustBeProvided => GetResourceString("Antiforgery_HeaderToken_MustBeProvided");
        /// <summary>The required antiforgery header value "{0}" is not present.</summary>
        internal static string FormatAntiforgery_HeaderToken_MustBeProvided(object p0)
           => string.Format(Culture, GetResourceString("Antiforgery_HeaderToken_MustBeProvided"), p0);

        /// <summary>The required antiforgery request token was not provided in either form field "{0}" or header value "{1}".</summary>
        internal static string Antiforgery_RequestToken_MustBeProvided => GetResourceString("Antiforgery_RequestToken_MustBeProvided");
        /// <summary>The required antiforgery request token was not provided in either form field "{0}" or header value "{1}".</summary>
        internal static string FormatAntiforgery_RequestToken_MustBeProvided(object p0, object p1)
           => string.Format(Culture, GetResourceString("Antiforgery_RequestToken_MustBeProvided"), p0, p1);

        /// <summary>The required antiforgery request token must be provided.</summary>
        internal static string Antiforgery_RequestToken_MustBeProvided_Generic => GetResourceString("Antiforgery_RequestToken_MustBeProvided_Generic");
        /// <summary>The antiforgery system has the configuration value {optionName} = {value}, but the current request is not an SSL request.</summary>
        internal static string Antiforgery_RequiresSSL => GetResourceString("Antiforgery_RequiresSSL");
        /// <summary>The antiforgery system has the configuration value {optionName} = {value}, but the current request is not an SSL request.</summary>
        internal static string FormatAntiforgery_RequiresSSL(object optionName, object value)
           => string.Format(Culture, GetResourceString("Antiforgery_RequiresSSL", new [] { "optionName", "value" }), optionName, value);

        /// <summary>Value cannot be null or empty.</summary>
        internal static string ArgumentCannotBeNullOrEmpty => GetResourceString("ArgumentCannotBeNullOrEmpty");

    }
}
