// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.Mvc.NewtonsoftJson
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>{0} cannot be null.</summary>
        internal static string ContractResolverCannotBeNull => GetResourceString("ContractResolverCannotBeNull");
        /// <summary>{0} cannot be null.</summary>
        internal static string FormatContractResolverCannotBeNull(object p0)
           => string.Format(Culture, GetResourceString("ContractResolverCannotBeNull"), p0);

        /// <summary>Cannot configure JSON casing behavior on '{0}' contract resolver. The supported contract resolver is {1}.</summary>
        internal static string InvalidContractResolverForJsonCasingConfiguration => GetResourceString("InvalidContractResolverForJsonCasingConfiguration");
        /// <summary>Cannot configure JSON casing behavior on '{0}' contract resolver. The supported contract resolver is {1}.</summary>
        internal static string FormatInvalidContractResolverForJsonCasingConfiguration(object p0, object p1)
           => string.Format(Culture, GetResourceString("InvalidContractResolverForJsonCasingConfiguration"), p0, p1);

        /// <summary>Parameter '{0}' must be an instance of {1} provided by the '{2}' package. Configure the correct instance using '{3}' in your startup.</summary>
        internal static string JsonHelperMustBeAnInstanceOfNewtonsoftJson => GetResourceString("JsonHelperMustBeAnInstanceOfNewtonsoftJson");
        /// <summary>Parameter '{0}' must be an instance of {1} provided by the '{2}' package. Configure the correct instance using '{3}' in your startup.</summary>
        internal static string FormatJsonHelperMustBeAnInstanceOfNewtonsoftJson(object p0, object p1, object p2, object p3)
           => string.Format(Culture, GetResourceString("JsonHelperMustBeAnInstanceOfNewtonsoftJson"), p0, p1, p2, p3);

        /// <summary>'{0}' reached the configured maximum size of the buffer when enumerating a value of type '{1}'. This limit is in place to prevent infinite streams of 'IAsyncEnumerable&lt;&gt;' from continuing indefinitely. If this is not a programming mistake, consider ways to  ...</summary>
        internal static string ObjectResultExecutor_MaxEnumerationExceeded => GetResourceString("ObjectResultExecutor_MaxEnumerationExceeded");
        /// <summary>'{0}' reached the configured maximum size of the buffer when enumerating a value of type '{1}'. This limit is in place to prevent infinite streams of 'IAsyncEnumerable&lt;&gt;' from continuing indefinitely. If this is not a programming mistake, consider ways to  ...</summary>
        internal static string FormatObjectResultExecutor_MaxEnumerationExceeded(object p0, object p1)
           => string.Format(Culture, GetResourceString("ObjectResultExecutor_MaxEnumerationExceeded"), p0, p1);

        /// <summary>Property '{0}.{1}' must be an instance of type '{2}'.</summary>
        internal static string Property_MustBeInstanceOfType => GetResourceString("Property_MustBeInstanceOfType");
        /// <summary>Property '{0}.{1}' must be an instance of type '{2}'.</summary>
        internal static string FormatProperty_MustBeInstanceOfType(object p0, object p1, object p2)
           => string.Format(Culture, GetResourceString("Property_MustBeInstanceOfType"), p0, p1, p2);

        /// <summary>Cannot deserialize {0} of type '{1}'.</summary>
        internal static string TempData_CannotDeserializeToken => GetResourceString("TempData_CannotDeserializeToken");
        /// <summary>Cannot deserialize {0} of type '{1}'.</summary>
        internal static string FormatTempData_CannotDeserializeToken(object p0, object p1)
           => string.Format(Culture, GetResourceString("TempData_CannotDeserializeToken"), p0, p1);

        /// <summary>The '{0}' cannot serialize a dictionary with a key of type '{1}'. The key must be of type '{2}'.</summary>
        internal static string TempData_CannotSerializeDictionary => GetResourceString("TempData_CannotSerializeDictionary");
        /// <summary>The '{0}' cannot serialize a dictionary with a key of type '{1}'. The key must be of type '{2}'.</summary>
        internal static string FormatTempData_CannotSerializeDictionary(object p0, object p1, object p2)
           => string.Format(Culture, GetResourceString("TempData_CannotSerializeDictionary"), p0, p1, p2);

        /// <summary>The '{0}' cannot serialize an object of type '{1}'.</summary>
        internal static string TempData_CannotSerializeType => GetResourceString("TempData_CannotSerializeType");
        /// <summary>The '{0}' cannot serialize an object of type '{1}'.</summary>
        internal static string FormatTempData_CannotSerializeType(object p0, object p1)
           => string.Format(Culture, GetResourceString("TempData_CannotSerializeType"), p0, p1);


    }
}
