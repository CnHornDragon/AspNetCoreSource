// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.Mvc.Abstractions
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>Value cannot be null or empty.</summary>
        internal static string ArgumentCannotBeNullOrEmpty => GetResourceString("ArgumentCannotBeNullOrEmpty");
        /// <summary>The ModelMetadata property must be set before accessing this property.</summary>
        internal static string ModelBindingContext_ModelMetadataMustBeSet => GetResourceString("ModelBindingContext_ModelMetadataMustBeSet");
        /// <summary>A field previously marked invalid should not be marked valid.</summary>
        internal static string Validation_InvalidFieldCannotBeReset => GetResourceString("Validation_InvalidFieldCannotBeReset");
        /// <summary>A field previously marked invalid should not be marked skipped.</summary>
        internal static string Validation_InvalidFieldCannotBeReset_ToSkipped => GetResourceString("Validation_InvalidFieldCannotBeReset_ToSkipped");
        /// <summary>The maximum number of allowed model errors has been reached.</summary>
        internal static string ModelStateDictionary_MaxModelStateErrors => GetResourceString("ModelStateDictionary_MaxModelStateErrors");
        /// <summary>Body</summary>
        internal static string BindingSource_Body => GetResourceString("BindingSource_Body");
        /// <summary>Custom</summary>
        internal static string BindingSource_Custom => GetResourceString("BindingSource_Custom");
        /// <summary>Form</summary>
        internal static string BindingSource_Form => GetResourceString("BindingSource_Form");
        /// <summary>Header</summary>
        internal static string BindingSource_Header => GetResourceString("BindingSource_Header");
        /// <summary>Services</summary>
        internal static string BindingSource_Services => GetResourceString("BindingSource_Services");
        /// <summary>ModelBinding</summary>
        internal static string BindingSource_ModelBinding => GetResourceString("BindingSource_ModelBinding");
        /// <summary>Path</summary>
        internal static string BindingSource_Path => GetResourceString("BindingSource_Path");
        /// <summary>Query</summary>
        internal static string BindingSource_Query => GetResourceString("BindingSource_Query");
        /// <summary>The provided binding source '{0}' is a composite. '{1}' requires that the source must represent a single type of input.</summary>
        internal static string BindingSource_CannotBeComposite => GetResourceString("BindingSource_CannotBeComposite");
        /// <summary>The provided binding source '{0}' is a composite. '{1}' requires that the source must represent a single type of input.</summary>
        internal static string FormatBindingSource_CannotBeComposite(object p0, object p1)
           => string.Format(Culture, GetResourceString("BindingSource_CannotBeComposite"), p0, p1);

        /// <summary>The provided binding source '{0}' is not a request-based binding source. '{1}' requires that the source must represent data from an HTTP request.</summary>
        internal static string BindingSource_MustBeFromRequest => GetResourceString("BindingSource_MustBeFromRequest");
        /// <summary>The provided binding source '{0}' is not a request-based binding source. '{1}' requires that the source must represent data from an HTTP request.</summary>
        internal static string FormatBindingSource_MustBeFromRequest(object p0, object p1)
           => string.Format(Culture, GetResourceString("BindingSource_MustBeFromRequest"), p0, p1);

        /// <summary>The provided binding source '{0}' is a greedy data source. '{1}' does not support greedy data sources.</summary>
        internal static string BindingSource_CannotBeGreedy => GetResourceString("BindingSource_CannotBeGreedy");
        /// <summary>The provided binding source '{0}' is a greedy data source. '{1}' does not support greedy data sources.</summary>
        internal static string FormatBindingSource_CannotBeGreedy(object p0, object p1)
           => string.Format(Culture, GetResourceString("BindingSource_CannotBeGreedy"), p0, p1);

        /// <summary>The provided binding source '{0}' is not a greedy data source. '{1}' only supports greedy data sources.</summary>
        internal static string BindingSource_MustBeGreedy => GetResourceString("BindingSource_MustBeGreedy");
        /// <summary>The provided binding source '{0}' is not a greedy data source. '{1}' only supports greedy data sources.</summary>
        internal static string FormatBindingSource_MustBeGreedy(object p0, object p1)
           => string.Format(Culture, GetResourceString("BindingSource_MustBeGreedy"), p0, p1);

        /// <summary>Special</summary>
        internal static string BindingSource_Special => GetResourceString("BindingSource_Special");
        /// <summary>FormFile</summary>
        internal static string BindingSource_FormFile => GetResourceString("BindingSource_FormFile");
        /// <summary>The type '{0}' must implement '{1}' to be used as a model binder.</summary>
        internal static string BinderType_MustBeIModelBinder => GetResourceString("BinderType_MustBeIModelBinder");
        /// <summary>The type '{0}' must implement '{1}' to be used as a model binder.</summary>
        internal static string FormatBinderType_MustBeIModelBinder(object p0, object p1)
           => string.Format(Culture, GetResourceString("BinderType_MustBeIModelBinder"), p0, p1);


    }
}
