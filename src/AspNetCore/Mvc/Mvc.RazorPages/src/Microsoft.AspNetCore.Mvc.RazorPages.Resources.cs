// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.Mvc.RazorPages
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>The '{0}' property of '{1}' must not be null.</summary>
        internal static string PropertyOfTypeCannotBeNull => GetResourceString("PropertyOfTypeCannotBeNull");
        /// <summary>The '{0}' property of '{1}' must not be null.</summary>
        internal static string FormatPropertyOfTypeCannotBeNull(object p0, object p1)
           => string.Format(Culture, GetResourceString("PropertyOfTypeCannotBeNull"), p0, p1);

        /// <summary>Page created by '{0}' must be an instance of '{1}'.</summary>
        internal static string ActivatedInstance_MustBeAnInstanceOf => GetResourceString("ActivatedInstance_MustBeAnInstanceOf");
        /// <summary>Page created by '{0}' must be an instance of '{1}'.</summary>
        internal static string FormatActivatedInstance_MustBeAnInstanceOf(object p0, object p1)
           => string.Format(Culture, GetResourceString("ActivatedInstance_MustBeAnInstanceOf"), p0, p1);

        /// <summary>The context used to execute '{0}' must be an instance of '{1}'. Returning a '{2}' from a controller is a not supported.</summary>
        internal static string PageViewResult_ContextIsInvalid => GetResourceString("PageViewResult_ContextIsInvalid");
        /// <summary>The context used to execute '{0}' must be an instance of '{1}'. Returning a '{2}' from a controller is a not supported.</summary>
        internal static string FormatPageViewResult_ContextIsInvalid(object p0, object p1, object p2)
           => string.Format(Culture, GetResourceString("PageViewResult_ContextIsInvalid"), p0, p1, p2);

        /// <summary>Value cannot be null or empty.</summary>
        internal static string ArgumentCannotBeNullOrEmpty => GetResourceString("ArgumentCannotBeNullOrEmpty");
        /// <summary>Unsupported handler method return type '{0}'.</summary>
        internal static string UnsupportedHandlerMethodType => GetResourceString("UnsupportedHandlerMethodType");
        /// <summary>Unsupported handler method return type '{0}'.</summary>
        internal static string FormatUnsupportedHandlerMethodType(object p0)
           => string.Format(Culture, GetResourceString("UnsupportedHandlerMethodType"), p0);

        /// <summary>Multiple handlers matched. The following handlers matched route data and had all constraints satisfied:{0}{0}{1}</summary>
        internal static string AmbiguousHandler => GetResourceString("AmbiguousHandler");
        /// <summary>Multiple handlers matched. The following handlers matched route data and had all constraints satisfied:{0}{0}{1}</summary>
        internal static string FormatAmbiguousHandler(object p0, object p1)
           => string.Format(Culture, GetResourceString("AmbiguousHandler"), p0, p1);

        /// <summary>Path must be a root relative path that starts with a forward slash '/'.</summary>
        internal static string PathMustBeRootRelativePath => GetResourceString("PathMustBeRootRelativePath");
        /// <summary>If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.</summary>
        internal static string AsyncPageFilter_InvalidShortCircuit => GetResourceString("AsyncPageFilter_InvalidShortCircuit");
        /// <summary>If an {0} provides a result value by setting the {1} property of {2} to a non-null value, then it cannot call the next filter by invoking {3}.</summary>
        internal static string FormatAsyncPageFilter_InvalidShortCircuit(object p0, object p1, object p2, object p3)
           => string.Format(Culture, GetResourceString("AsyncPageFilter_InvalidShortCircuit"), p0, p1, p2, p3);

        /// <summary>The type '{0}' is not a valid page. A page must inherit from '{1}'.</summary>
        internal static string InvalidPageType_WrongBase => GetResourceString("InvalidPageType_WrongBase");
        /// <summary>The type '{0}' is not a valid page. A page must inherit from '{1}'.</summary>
        internal static string FormatInvalidPageType_WrongBase(object p0, object p1)
           => string.Format(Culture, GetResourceString("InvalidPageType_WrongBase"), p0, p1);

        /// <summary>The type '{0}' is not a valid page. A page must define a public, non-static '{1}' property.</summary>
        internal static string InvalidPageType_NoModelProperty => GetResourceString("InvalidPageType_NoModelProperty");
        /// <summary>The type '{0}' is not a valid page. A page must define a public, non-static '{1}' property.</summary>
        internal static string FormatInvalidPageType_NoModelProperty(object p0, object p1)
           => string.Format(Culture, GetResourceString("InvalidPageType_NoModelProperty"), p0, p1);

        /// <summary>'{0}' is not a valid page name. A page name is path relative to the Razor Pages root directory that starts with a leading forward slash ('/') and does not contain the file extension e.g "/Users/Edit".</summary>
        internal static string InvalidValidPageName => GetResourceString("InvalidValidPageName");
        /// <summary>'{0}' is not a valid page name. A page name is path relative to the Razor Pages root directory that starts with a leading forward slash ('/') and does not contain the file extension e.g "/Users/Edit".</summary>
        internal static string FormatInvalidValidPageName(object p0)
           => string.Format(Culture, GetResourceString("InvalidValidPageName"), p0);

        /// <summary>The model type for '{0}' is of type '{1}' which is not assignable to its declared model type '{2}'.</summary>
        internal static string InvalidActionDescriptorModelType => GetResourceString("InvalidActionDescriptorModelType");
        /// <summary>The model type for '{0}' is of type '{1}' which is not assignable to its declared model type '{2}'.</summary>
        internal static string FormatInvalidActionDescriptorModelType(object p0, object p1, object p2)
           => string.Format(Culture, GetResourceString("InvalidActionDescriptorModelType"), p0, p1, p2);


    }
}
