// <auto-generated>
using System.Reflection;


namespace Microsoft.AspNetCore.Identity
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>Type {0} must derive from {1}&lt;{2}&gt;.</summary>
        internal static string InvalidManagerType => GetResourceString("InvalidManagerType");
        /// <summary>Type {0} must derive from {1}&lt;{2}&gt;.</summary>
        internal static string FormatInvalidManagerType(object p0, object p1, object p2)
           => string.Format(Culture, GetResourceString("InvalidManagerType"), p0, p1, p2);

        /// <summary>The provided PasswordHasherCompatibilityMode is invalid.</summary>
        internal static string InvalidPasswordHasherCompatibilityMode => GetResourceString("InvalidPasswordHasherCompatibilityMode");
        /// <summary>The iteration count must be a positive integer.</summary>
        internal static string InvalidPasswordHasherIterationCount => GetResourceString("InvalidPasswordHasherIterationCount");

    }
}
