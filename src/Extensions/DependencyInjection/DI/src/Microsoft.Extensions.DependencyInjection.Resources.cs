// <auto-generated>
using System.Reflection;


namespace Microsoft.Extensions.DependencyInjection
{
    internal static partial class Resources
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(Resources)));
        internal static global::System.Globalization.CultureInfo Culture { get; set; }

        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string GetResourceString(string resourceKey, string defaultValue = null) =>  ResourceManager.GetString(resourceKey, Culture);

        private static string GetResourceString(string resourceKey, string[] formatterNames)
        {
           var value = GetResourceString(resourceKey);
           if (formatterNames != null)
           {
               for (var i = 0; i < formatterNames.Length; i++)
               {
                   value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
               }
           }
           return value;
        }

        /// <summary>Unable to activate type '{0}'. The following constructors are ambiguous:</summary>
        internal static string AmbiguousConstructorException => GetResourceString("AmbiguousConstructorException");
        /// <summary>Unable to activate type '{0}'. The following constructors are ambiguous:</summary>
        internal static string FormatAmbiguousConstructorException(object p0)
           => string.Format(Culture, GetResourceString("AmbiguousConstructorException"), p0);

        /// <summary>Unable to resolve service for type '{0}' while attempting to activate '{1}'.</summary>
        internal static string CannotResolveService => GetResourceString("CannotResolveService");
        /// <summary>Unable to resolve service for type '{0}' while attempting to activate '{1}'.</summary>
        internal static string FormatCannotResolveService(object p0, object p1)
           => string.Format(Culture, GetResourceString("CannotResolveService"), p0, p1);

        /// <summary>A circular dependency was detected for the service of type '{0}'.</summary>
        internal static string CircularDependencyException => GetResourceString("CircularDependencyException");
        /// <summary>A circular dependency was detected for the service of type '{0}'.</summary>
        internal static string FormatCircularDependencyException(object p0)
           => string.Format(Culture, GetResourceString("CircularDependencyException"), p0);

        /// <summary>No constructor for type '{0}' can be instantiated using services from the service container and default values.</summary>
        internal static string UnableToActivateTypeException => GetResourceString("UnableToActivateTypeException");
        /// <summary>No constructor for type '{0}' can be instantiated using services from the service container and default values.</summary>
        internal static string FormatUnableToActivateTypeException(object p0)
           => string.Format(Culture, GetResourceString("UnableToActivateTypeException"), p0);

        /// <summary>Open generic service type '{0}' requires registering an open generic implementation type.</summary>
        internal static string OpenGenericServiceRequiresOpenGenericImplementation => GetResourceString("OpenGenericServiceRequiresOpenGenericImplementation");
        /// <summary>Open generic service type '{0}' requires registering an open generic implementation type.</summary>
        internal static string FormatOpenGenericServiceRequiresOpenGenericImplementation(object p0)
           => string.Format(Culture, GetResourceString("OpenGenericServiceRequiresOpenGenericImplementation"), p0);

        /// <summary>Cannot instantiate implementation type '{0}' for service type '{1}'.</summary>
        internal static string TypeCannotBeActivated => GetResourceString("TypeCannotBeActivated");
        /// <summary>Cannot instantiate implementation type '{0}' for service type '{1}'.</summary>
        internal static string FormatTypeCannotBeActivated(object p0, object p1)
           => string.Format(Culture, GetResourceString("TypeCannotBeActivated"), p0, p1);

        /// <summary>A suitable constructor for type '{0}' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.</summary>
        internal static string NoConstructorMatch => GetResourceString("NoConstructorMatch");
        /// <summary>A suitable constructor for type '{0}' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.</summary>
        internal static string FormatNoConstructorMatch(object p0)
           => string.Format(Culture, GetResourceString("NoConstructorMatch"), p0);

        /// <summary>Cannot consume {2} service '{0}' from {3} '{1}'.</summary>
        internal static string ScopedInSingletonException => GetResourceString("ScopedInSingletonException");
        /// <summary>Cannot consume {2} service '{0}' from {3} '{1}'.</summary>
        internal static string FormatScopedInSingletonException(object p0, object p1, object p2, object p3)
           => string.Format(Culture, GetResourceString("ScopedInSingletonException"), p0, p1, p2, p3);

        /// <summary>Cannot resolve '{0}' from root provider because it requires {2} service '{1}'.</summary>
        internal static string ScopedResolvedFromRootException => GetResourceString("ScopedResolvedFromRootException");
        /// <summary>Cannot resolve '{0}' from root provider because it requires {2} service '{1}'.</summary>
        internal static string FormatScopedResolvedFromRootException(object p0, object p1, object p2)
           => string.Format(Culture, GetResourceString("ScopedResolvedFromRootException"), p0, p1, p2);

        /// <summary>Cannot resolve {1} service '{0}' from root provider.</summary>
        internal static string DirectScopedResolvedFromRootException => GetResourceString("DirectScopedResolvedFromRootException");
        /// <summary>Cannot resolve {1} service '{0}' from root provider.</summary>
        internal static string FormatDirectScopedResolvedFromRootException(object p0, object p1)
           => string.Format(Culture, GetResourceString("DirectScopedResolvedFromRootException"), p0, p1);

        /// <summary>Constant value of type '{0}' can't be converted to service type '{1}'</summary>
        internal static string ConstantCantBeConvertedToServiceType => GetResourceString("ConstantCantBeConvertedToServiceType");
        /// <summary>Constant value of type '{0}' can't be converted to service type '{1}'</summary>
        internal static string FormatConstantCantBeConvertedToServiceType(object p0, object p1)
           => string.Format(Culture, GetResourceString("ConstantCantBeConvertedToServiceType"), p0, p1);

        /// <summary>Implementation type '{0}' can't be converted to service type '{1}'</summary>
        internal static string ImplementationTypeCantBeConvertedToServiceType => GetResourceString("ImplementationTypeCantBeConvertedToServiceType");
        /// <summary>Implementation type '{0}' can't be converted to service type '{1}'</summary>
        internal static string FormatImplementationTypeCantBeConvertedToServiceType(object p0, object p1)
           => string.Format(Culture, GetResourceString("ImplementationTypeCantBeConvertedToServiceType"), p0, p1);

        /// <summary>'{0}' type only implements IAsyncDisposable. Use DisposeAsync to dispose the container.</summary>
        internal static string AsyncDisposableServiceDispose => GetResourceString("AsyncDisposableServiceDispose");
        /// <summary>'{0}' type only implements IAsyncDisposable. Use DisposeAsync to dispose the container.</summary>
        internal static string FormatAsyncDisposableServiceDispose(object p0)
           => string.Format(Culture, GetResourceString("AsyncDisposableServiceDispose"), p0);


    }
}
